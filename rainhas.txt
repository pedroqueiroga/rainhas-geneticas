Minha função de crossover está fazendo convergir para um máximo local, que não é um global, e sem a mutação eu não consigo sair dele. Chega um momento em que todos os indivíduos da população são iguais!

Coloquei uma função de mutação, antes estava sem, porque eu achei que não precisaria. Mas precisa, para fazer sair desse máximo local mesmo. Coloquei uma que escolhe índices aleatórios do indivíduo e os troca. Dessa forma, agora está conseguindo encontrar uma solução. O que eu acho esquisito é que ainda chegam momentos em que a população toda é igual. Esses testes foram com uma população de 10 tabuleiros, então talvez seja isso que faz com que rapidamente viciem.

(1) Agora tem uma população crescente, com controle de população, e morte por idade além da morte por fitness.

TODO: verificar com e sem (1), e procurar por bons parâmetros.
TODO: algoritmo genético cujos cromossomos são esses parâmetros, e buscar pelos parâmetros que convergem mais rápido. Isso cria um problema circular, pois o algoritmo genético terá parâmetros a serem melhorados, mas acho que posso ignorar e só me importar com os parâmetros nas rainhas.

bit-string representation.
number of runs: 100
starting...  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100 done.
ran for 20.80 seconds.
successes: 100
average number of generations: 180.5
least number of generations needed: 1
largest number of generations needed: 1584
average individual evaluation: 1.1860000000000008
average worst individual: 2.19

array of integers representation.
number of runs: 100
starting...  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100 done.
ran for 12.57 seconds.
successes: 100
average number of generations: 158.87
least number of generations needed: 0
largest number of generations needed: 904
average individual evaluation: 1.3160000000000003
average worst individual: 2.32


array of integers representation.
population size = 10. mutation chance = 10.0 %. recombination chance = 90.0 %
using tournament for selection.
--------------------------------------------------------------------------------
number of runs: 100
starting... 
100 of 100 (100.00 %) done.
ran for 8.52 seconds.
successes: 100
average number of generations: 99.79
least number of generations needed: 0
largest number of generations needed: 935
average individual evaluation: 1.3020000000000005
average worst individual: 2.42

array of integers representation.
population size = 100. mutation chance = 10.0 %. recombination chance = 90.0 %
using tournament for selection.
--------------------------------------------------------------------------------
number of runs: 100
starting... 
100 of 100 (100.00 %) done.
ran for 51.15 seconds.
successes: 100
average number of generations: 73.45
least number of generations needed: 0
largest number of generations needed: 390
average individual evaluation: 2.6155
average worst individual: 4.29

COM UMA POPULACAO MAIOR LEVOU MAIS TEMPO, mas precisou na media de menos geracoes
e o pior caso teve menos geracao tb. o individuo medio ficou pior (o dobro), e o pior médio ficou pior tb (pouco menos que o dobro), o que faz sentido, já que vai ter mais diversidade.

array of integers representation.
population size = 10. mutation chance = 10.0 %. recombination chance = 90.0 %
using old recombination and mutation functions. 
using tournament for selection.
--------------------------------------------------------------------------------
number of runs: 100
starting... 
100 of 100 (100.00 %) done.
ran for 479.03 seconds.
successes: 89
average number of generations: 5269.02
least number of generations needed: 0
largest number of generations needed: 20000
average individual evaluation: 1.3550000000000002
average worst individual: 4.05

array of integers representation.
population size = 100
using old recombination and mutation functions. 
using tournament for selection.
--------------------------------------------------------------------------------
number of runs: 30
starting... 
30 of 30 (100.00 %) done.
ran for 713.84 seconds.
successes: 28
average number of generations: 3463.1
least number of generations needed: 0
largest number of generations needed: 20000
average individual evaluation: 1.9063333333333334
average worst individual: 4.966666666666667


Esses resultados me levam a crer que a estratégia de selecionar k=5 aleatoriamente, para escolher os 2 melhores desses, é muito ruim para uma população grande. Talvez um k percentual seja melhor. Inspirado em 5 ser bem bom para 10, vou fazer k=50% do tamanho da população. Talvez seja melhor ainda ser bastante elitista e fazer k = 100% da população. veremos.

com k = 0.5 * len(population):

array of integers representation.
population size = 10. mutation chance = 10.0 %. recombination chance = 90.0 %
using tournament for selection.
--------------------------------------------------------------------------------
number of runs: 100
starting... 
100 of 100 (100.00 %) done.
ran for 17.76 seconds.
successes: 100
average number of generations: 170.87
least number of generations needed: 4
largest number of generations needed: 1843
average individual evaluation: 1.1480000000000001
average worst individual: 2.17

array of integers representation.
population size = 100. mutation chance = 10.0 %. recombination chance = 90.0 %
using tournament for selection.
--------------------------------------------------------------------------------
number of runs: 100
starting... 
100 of 100 (100.00 %) done.
ran for 189.82 seconds.
successes: 100
average number of generations: 188.36
least number of generations needed: 0
largest number of generations needed: 1584
average individual evaluation: 2.0945
average worst individual: 3.75

caramba, ficou pior pegando 50% da populacao pra escolher 2 melhores quando o tamanho da populacao eh 100 vei...

array of integers representation.
population size = 10. mutation chance = 10.0 %. recombination chance = 90.0 %
using tournament for selection.
using old recombination and mutation functions. 
--------------------------------------------------------------------------------
number of runs: 100
starting... 
100 of 100 (100.00 %) done.
ran for 545.78 seconds.
successes: 91
average number of generations: 4966.74
least number of generations needed: 0
largest number of generations needed: 20000
average individual evaluation: 1.412
average worst individual: 4.4
