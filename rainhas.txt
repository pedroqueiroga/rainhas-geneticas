Minha função de crossover está fazendo convergir para um máximo local, que não é um global, e sem a mutação eu não consigo sair dele. Chega um momento em que todos os indivíduos da população são iguais!

Coloquei uma função de mutação, antes estava sem, porque eu achei que não precisaria. Mas precisa, para fazer sair desse máximo local mesmo. Coloquei uma que escolhe índices aleatórios do indivíduo e os troca. Dessa forma, agora está conseguindo encontrar uma solução. O que eu acho esquisito é que ainda chegam momentos em que a população toda é igual. Esses testes foram com uma população de 10 tabuleiros, então talvez seja isso que faz com que rapidamente viciem.

(1) Agora tem uma população crescente, com controle de população, e morte por idade além da morte por fitness.

TODO: verificar com e sem (1), e procurar por bons parâmetros.
TODO: algoritmo genético cujos cromossomos são esses parâmetros, e buscar pelos parâmetros que convergem mais rápido. Isso cria um problema circular, pois o algoritmo genético terá parâmetros a serem melhorados, mas acho que posso ignorar e só me importar com os parâmetros nas rainhas.

bit-string representation.
number of runs: 100
starting...  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100 done.
ran for 20.80 seconds.
successes: 100
average number of generations: 180.5
least number of generations needed: 1
largest number of generations needed: 1584
average individual evaluation: 1.1860000000000008
average worst individual: 2.19

array of integers representation.
number of runs: 100
starting...  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100 done.
ran for 12.57 seconds.
successes: 100
average number of generations: 158.87
least number of generations needed: 0
largest number of generations needed: 904
average individual evaluation: 1.3160000000000003
average worst individual: 2.32
